// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model untuk User (Guru)
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  assignedClass Int?   // Kelas yang ditugaskan (1-6)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relasi
  students    Student[]
  grades      Grade[]

  @@map("users")
}

// Model untuk Siswa
model Student {
  id        String   @id @default(cuid())
  name      String
  nisn      String?  // Nomor Induk Siswa Nasional
  class     Int      // Kelas 1-6
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi
  teacher   User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  grades    Grade[]

  @@map("students")
}

// Model untuk Mata Pelajaran
model Subject {
  id        String   @id @default(cuid())
  name      String
  classLevel Int      // Level kelas (1-3 atau 4-6)
  createdAt DateTime @default(now())

  // Relasi
  grades    Grade[]

  @@map("subjects")
}

// Model untuk Nilai
model Grade {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  teacherId String
  taskName  String   // Nama tugas/ulangan
  score     Float    // Nilai
  maxScore  Float    @default(100) // Nilai maksimal
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher   User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("grades")
}
